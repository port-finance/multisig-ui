{"version":3,"sources":["components/Notification.tsx","utils/idl.ts","components/Multisig.tsx","components/Header.tsx","components/Footer.tsx","components/Layout.tsx","App.tsx","reportWebVitals.ts","index.tsx","idl/index.ts","hooks/useMultisigProgram.tsx","utils/ids.ts","context/connection.tsx","utils/utils.ts"],"names":["ViewTransactionOnExplorerButton","props","signature","env","useConnectionConfig","urlSuffix","toString","color","component","target","rel","href","IDL_INSTRUCTION_LAYOUT","rustEnum","struct","encodeInstruction","i","buffer","Buffer","alloc","len","encode","concat","IDL_TAG","slice","from","reverse","Multisig","multisig","fixed","maxWidth","style","position","bottom","right","display","flexDirection","NewMultisigButton","MultisigInstance","useState","open","setOpen","border","width","height","borderRadius","onClick","NewMultisigDialog","onClose","multisigClient","useMultisigProgram","undefined","multisigAccount","setMultisigAccount","transactions","setTransactions","showSignerDialog","setShowSignerDialog","showAddTransactionDialog","setShowAddTransactionDialog","forceRefresh","setForceRefresh","useEffect","account","fetch","then","catch","err","console","error","transaction","all","toBuffer","txs","subscribe","on","marginBottom","marginTop","padding","marginLeft","marginRight","textAlign","elevation","variant","flexGrow","threshold","owners","length","title","arrow","disablePadding","primary","map","tx","TxListItem","publicKey","AddTransactionDialog","didAddTransaction","SignerDialog","provider","wallet","history","useHistory","enqueueSnackbar","useSnackbar","setThreshold","zeroAddr","PublicKey","participants","setParticipants","_onClose","maxParticipantLength","setMaxParticipantLength","disableCreate","createMultisig","a","Account","multisigSize","findProgramAddress","programId","nonce","p","rpc","BN","rent","SYSVAR_RENT_PUBKEY","createInstruction","accounts","signers","instructions","action","push","fullWidth","label","value","type","onChange","e","parseInt","idx","justifyContent","disabled","str","txAccount","setTxAccount","rows","field","didExecute","wordBreak","background","float","encodeBase64","data","ownerSetSeqno","msAccountRows","owner","approve","execute","multisigSigner","executeTransaction","remainingAccounts","t","pubkey","equals","isSigner","isWritable","button","icon","ixLabel","in","timeout","unmountOnExit","errStr","align","r","AccountsList","BPF_LOADER_UPGRADEABLE_PID","secondary","coder","sighash","idl","signer","setSigner","addrNonce","paddingBottom","ProgramUpdateListItem","IdlUpgradeListItem","MultisigSetOwnersListItem","ChangeThresholdListItem","TransferTokenListItem","ChangeThresholdListItemDetails","changeThreshold","changeThresholdData","proposer","createTransaction","paddingLeft","paddingRight","SetOwnersListItemDetails","setOwners","setOwnersData","UpgradeIdlListItemDetails","setProgramId","setBuffer","createTransactionAccount","programAddr","bufferAddr","idlAddress","idlAddr","accs","UpgradeProgramListItemDetails","connection","getAccountInfo","programAccount","Error","programdataAddress","spill","SYSVAR_CLOCK_PUBKEY","TransferTokenListItemDetails","source","setSource","destination","setDestination","amount","setAmount","sourceAddr","serumCmn","sourceTokenAccount","mint","tokenMint","destinationAddr","TEN","u64","multiplier","pow","decimals","amountInLamports","mul","transferIx","Token","createTransferInstruction","TOKEN_PROGRAM_ID","keys","instruction","base","createWithSeed","Header","useAnchorWallet","multisigAddress","setMultisigAddress","addr","_","isValidPubkey","searchFn","AppBar","boxShadow","borderBottom","Toolbar","flex","BarButton","hrefClient","backgroundColor","outlineWidth","placeholder","onKeyPress","key","IconButton","NetworkSelector","startIcon","Link","textDecoration","Button","Typography","fontSize","anchorEl","setAnchorEl","setEndpoint","handleClose","currentTarget","Menu","Boolean","ENDPOINTS","endpoint","MenuItem","name","Footer","zIndex","borderTop","FooterButton","isEnd","Layout","refresh","setRefresh","minHeight","RiskBar","window","localStorage","getItem","children","RiskDisclosureForm","onConsent","setItem","MultisigPage","MultisigInstancePage","path","useLocation","pathname","split","App","theme","createMuiTheme","palette","default","typography","fontFamily","join","overrides","wallets","useMemo","getPhantomWallet","getSolflareWallet","getTorusWallet","options","clientId","getLedgerWallet","getSolongWallet","getMathWallet","getSolletWallet","CssBaseline","maxSnack","autoHideDuration","WalletProvider","autoConnect","basename","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","version","isMut","args","vec","defined","kind","fields","types","errors","code","msg","useConnection","Provider","Wallet","Keypair","generate","preflightCommitment","commitment","Program","MultisigIdl","PROGRAM_IDS","chainID","ChainID","MainnetBeta","clusterApiUrl","Testnet","Devnet","DEFAULT","ConnectionContext","React","createContext","Connection","sendConnection","ConnectionProvider","envName","defaultState","storedState","JSON","parse","state","setState","setLocalStorageState","useCallback","newState","removeItem","stringify","useLocalStorageState","find","end","id","onAccountChange","removeAccountChangeListener","onSlotChange","removeSlotChangeListener","useContext","context"],"mappings":"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","file":"static/js/main.93e58c10.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { TransactionSignature } from \"@solana/web3.js\";\nimport { useConnectionConfig } from \"../context/connection\";\n\ntype Props = {\n  signature: string;\n};\n\nexport async function withTx(\n  snack: any,\n  beforeLabel: string,\n  afterLabel: string,\n  execTx: () => Promise<TransactionSignature>\n) {\n  snack.enqueueSnackbar(beforeLabel, {\n    variant: \"info\",\n  });\n  try {\n    let tx = await execTx();\n    snack.closeSnackbar();\n    snack.enqueueSnackbar(afterLabel, {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  } catch (err) {\n    snack.enqueueSnackbar(`Error: ${err.toString()}`, {\n      variant: \"error\",\n    });\n  }\n}\n\nexport function ViewTransactionOnExplorerButton(props: Props) {\n  const { signature } = props;\n  const { env } = useConnectionConfig();\n  const urlSuffix = `?cluster=${env.toString()}`;\n  return (\n    <Button\n      color=\"inherit\"\n      component=\"a\"\n      target=\"_blank\"\n      rel=\"noopener\"\n      href={`https://explorer.solana.com/tx/${signature}` + urlSuffix}\n    >\n      View on Solana Explorer\n    </Button>\n  );\n}\n","import { struct, Layout } from \"buffer-layout\";\nimport { rustEnum } from \"@project-serum/borsh\";\n\n// Simplified since we only use the SetBuffer variant.\nexport type IdlInstruction =\n  | Create\n  | CreateBuffer\n  | Write\n  | SetBuffer\n  | SetAuthority;\n\ntype Create = {};\ntype CreateBuffer = {};\ntype Write = {};\ntype SetBuffer = {};\ntype SetAuthority = {};\n\nconst IDL_INSTRUCTION_LAYOUT: Layout<IdlInstruction> = rustEnum([\n  struct([], \"create\"),\n  struct([], \"createBuffer\"),\n  struct([], \"write\"),\n  struct([], \"setBuffer\"),\n  struct([], \"setAuthority\"),\n]);\n\nexport function encodeInstruction(i: IdlInstruction): Buffer {\n  const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n  const len = IDL_INSTRUCTION_LAYOUT.encode(i, buffer);\n  return Buffer.concat([IDL_TAG, buffer.slice(0, len)]);\n}\n\n// Reverse for little endian.\nexport const IDL_TAG = Buffer.from(\"0a69e9a778bcf440\", \"hex\").reverse();\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useSnackbar } from \"notistack\";\nimport { encode as encodeBase64 } from \"js-base64\";\nimport Container from \"@material-ui/core/Container\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport GavelIcon from \"@material-ui/icons/Gavel\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport Paper from \"@material-ui/core/Paper\";\nimport SupervisorAccountIcon from \"@material-ui/icons/SupervisorAccount\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ReceiptIcon from \"@material-ui/icons/Receipt\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport BuildIcon from \"@material-ui/icons/Build\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport List from \"@material-ui/core/List\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport * as serumCmn from '@project-serum/common';\nimport BN from \"bn.js\";\nimport {\n  Account,\n  PublicKey,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from \"@solana/web3.js\";\nimport { ViewTransactionOnExplorerButton } from \"./Notification\";\nimport * as idl from \"../utils/idl\";\nimport { useMultisigProgram } from \"../hooks/useMultisigProgram\";\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID, u64 } from \"@solana/spl-token\";\nimport { MoneyOffOutlined, MoneyOutlined, MoneyRounded } from \"@material-ui/icons\";\n\nexport default function Multisig({ multisig }: { multisig?: PublicKey }) {\n  return (\n    <div>\n      <Container fixed maxWidth=\"md\">\n        <div\n          style={{\n            position: \"fixed\",\n            bottom: \"75px\",\n            right: \"75px\",\n            display: \"flex\",\n            flexDirection: \"row-reverse\",\n          }}\n        >\n          <NewMultisigButton />\n        </div>\n      </Container>\n      {multisig && <MultisigInstance multisig={multisig} />}\n    </div>\n  );\n}\n\nfunction NewMultisigButton() {\n  const [open, setOpen] = useState(false);\n  return (\n    <div style={{ display: \"flex\" }}>\n      <IconButton\n        style={{\n          border: \"solid 1pt #ccc\",\n          width: \"60px\",\n          height: \"60px\",\n          borderRadius: \"30px\",\n        }}\n        onClick={() => setOpen(true)}\n      >\n        <AddIcon />\n      </IconButton>\n      <NewMultisigDialog open={open} onClose={() => setOpen(false)} />\n    </div>\n  );\n}\n\nexport function MultisigInstance({ multisig }: { multisig: PublicKey }) {\n  const multisigClient = useMultisigProgram();\n  const [multisigAccount, setMultisigAccount] = useState<any>(undefined);\n  const [transactions, setTransactions] = useState<any>(null);\n  const [showSignerDialog, setShowSignerDialog] = useState(false);\n  const [showAddTransactionDialog, setShowAddTransactionDialog] = useState(\n    false\n  );\n  const [forceRefresh, setForceRefresh] = useState(false);\n  useEffect(() => {\n    multisigClient.account\n      .multisig.fetch(multisig)\n      .then((account: any) => {\n        setMultisigAccount(account);\n      })\n      .catch((err: any) => {\n        console.error(err);\n        setMultisigAccount(null);\n      });\n  }, [multisig, multisigClient.account]);\n  useEffect(() => {\n    multisigClient.account.transaction.all(multisig.toBuffer()).then((txs) => {\n      setTransactions(txs);\n    });\n  }, [multisigClient.account.transaction, multisig, forceRefresh]);\n  useEffect(() => {\n    multisigClient.account.multisig\n      .subscribe(multisig)\n      .on(\"change\", (account) => {\n        setMultisigAccount(account);\n      });\n  }, [multisigClient, multisig]);\n  return (\n    <Container fixed maxWidth=\"md\" style={{ marginBottom: \"16px\" }}>\n      <div>\n        <Card style={{ marginTop: \"24px\" }}>\n          {multisigAccount === undefined ? (\n            <div style={{ padding: \"16px\" }}>\n              <CircularProgress\n                style={{\n                  display: \"block\",\n                  marginLeft: \"auto\",\n                  marginRight: \"auto\",\n                }}\n              />\n            </div>\n          ) : multisigAccount === null ? (\n            <CardContent>\n              <Typography\n                color=\"textSecondary\"\n                style={{\n                  padding: \"24px\",\n                  textAlign: \"center\",\n                }}\n              >\n                Multisig not found\n              </Typography>\n            </CardContent>\n          ) : (\n            <></>\n          )}\n        </Card>\n        {multisigAccount && (\n          <Paper>\n            <AppBar\n              style={{ marginTop: \"24px\" }}\n              position=\"static\"\n              color=\"default\"\n              elevation={1}\n            >\n              <Toolbar>\n                <Typography variant=\"h6\" style={{ flexGrow: 1 }} component=\"h2\">\n                  {multisig.toString()} | {multisigAccount.threshold.toString()}{\" \"}\n                  of {multisigAccount.owners.length.toString()} Multisig\n                </Typography>\n                <Tooltip title=\"Signer\" arrow>\n                  <IconButton onClick={() => setShowSignerDialog(true)}>\n                    <InfoIcon />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Add\" arrow>\n                  <IconButton onClick={() => setShowAddTransactionDialog(true)}>\n                    <AddIcon />\n                  </IconButton>\n                </Tooltip>\n              </Toolbar>\n            </AppBar>\n            <List disablePadding>\n              {transactions === null ? (\n                <div style={{ padding: \"16px\" }}>\n                  <CircularProgress\n                    style={{\n                      display: \"block\",\n                      marginLeft: \"auto\",\n                      marginRight: \"auto\",\n                    }}\n                  />\n                </div>\n              ) : transactions.length === 0 ? (\n                <ListItem>\n                  <ListItemText primary=\"No transactions found\" />\n                </ListItem>\n              ) : (\n                transactions.map((tx: any) => (\n                  <TxListItem\n                    key={tx.publicKey.toString()}\n                    multisig={multisig}\n                    multisigAccount={multisigAccount}\n                    tx={tx}\n                  />\n                ))\n              )}\n            </List>\n          </Paper>\n        )}\n      </div>\n      <AddTransactionDialog\n        multisig={multisig}\n        open={showAddTransactionDialog}\n        onClose={() => setShowAddTransactionDialog(false)}\n        didAddTransaction={() => setForceRefresh(!forceRefresh)}\n      />\n      {multisigAccount && (\n        <SignerDialog\n          key={multisigClient.provider.wallet.publicKey.toString()}\n          multisig={multisig}\n          multisigAccount={multisigAccount}\n          open={showSignerDialog}\n          onClose={() => setShowSignerDialog(false)}\n        />\n      )}\n    </Container>\n  );\n}\n\nexport function NewMultisigDialog({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) {\n  const history = useHistory();\n  const multisigClient = useMultisigProgram();\n  const { enqueueSnackbar } = useSnackbar();\n  const [threshold, setThreshold] = useState(2);\n  // @ts-ignore\n  const zeroAddr = new PublicKey(\"11111111111111111111111111111111\").toString();\n  const [participants, setParticipants] = useState([zeroAddr]);\n  const _onClose = () => {\n    onClose();\n    setThreshold(2);\n    setParticipants([zeroAddr, zeroAddr]);\n  };\n  const [maxParticipantLength, setMaxParticipantLength] = useState(10);\n  const disableCreate = maxParticipantLength < participants.length;\n  const createMultisig = async () => {\n    enqueueSnackbar(\"Creating multisig\", {\n      variant: \"info\",\n    });\n    const multisig = new Account();\n    // Disc. + threshold + nonce.\n    const baseSize = 8 + 8 + 1 + 4;\n    // Add enough for 2 more participants, in case the user changes one's\n    /// mind later.\n    const fudge = 64;\n    // Can only grow the participant set by 2x the initialized value.\n    const ownerSize = maxParticipantLength * 32 + 8;\n    const multisigSize = baseSize + ownerSize + fudge;\n    const [, nonce] = await PublicKey.findProgramAddress(\n      [multisig.publicKey.toBuffer()],\n      multisigClient.programId\n    );\n    const owners = participants.map((p) => new PublicKey(p));\n    const tx = await multisigClient.rpc.createMultisig(\n      owners,\n      new BN(threshold),\n      nonce,\n      {\n        accounts: {\n          multisig: multisig.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [multisig],\n        instructions: [\n          await multisigClient.account.multisig.createInstruction(\n            multisig,\n            // @ts-ignore\n            multisigSize\n          ),\n        ],\n      }\n    );\n    enqueueSnackbar(`Multisig created: ${multisig.publicKey.toString()}`, {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    _onClose();\n    history.push(`/${multisig.publicKey.toString()}`);\n  };\n  return (\n    <Dialog fullWidth open={open} onClose={_onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Multisig\n        </Typography>\n      </DialogTitle>\n      <DialogContent>\n        <TextField\n          fullWidth\n          label=\"Threshold\"\n          value={threshold}\n          type=\"number\"\n          onChange={(e) => setThreshold(parseInt(e.target.value) as number)}\n        />\n        <TextField\n          fullWidth\n          label=\"Max Number of Participants (cannot grow the owner set past this)\"\n          value={maxParticipantLength}\n          type=\"number\"\n          onChange={(e) => setMaxParticipantLength(parseInt(e.target.value) as number)}\n        />\n        {participants.map((p, idx) => (\n          <TextField\n            key={p}\n            fullWidth\n            label=\"Participant\"\n            value={p}\n            onChange={(e) => {\n              const p = [...participants];\n              p[idx] = e.target.value;\n              setParticipants(p);\n            }}\n          />\n        ))}\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <IconButton\n            onClick={() => {\n              const p = [...participants];\n              // @ts-ignore\n              p.push(new PublicKey(\"11111111111111111111111111111111\").toString());\n              setParticipants(p);\n            }}\n          >\n            <AddIcon />\n          </IconButton>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={_onClose}>Cancel</Button>\n        <Button\n          disabled={disableCreate}\n          variant=\"contained\"\n          type=\"submit\"\n          color=\"primary\"\n          onClick={() =>\n            createMultisig().catch((err) => {\n              const str = err ? err.toString() : \"\";\n              enqueueSnackbar(`Error creating multisig: ${str}`, {\n                variant: \"error\",\n              });\n            })\n          }\n        >\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction TxListItem({\n  multisig,\n  multisigAccount,\n  tx,\n}: {\n  multisig: PublicKey;\n  multisigAccount: any;\n  tx: any;\n}) {\n  const { enqueueSnackbar } = useSnackbar();\n  const multisigClient = useMultisigProgram();\n  const [open, setOpen] = useState(false);\n  const [txAccount, setTxAccount] = useState(tx.account);\n  useEffect(() => {\n    multisigClient.account.transaction\n      .subscribe(tx.publicKey)\n      .on(\"change\", (account) => {\n        setTxAccount(account);\n      });\n  }, [multisigClient, multisig, tx.publicKey]);\n  const rows = [\n    {\n      field: \"Program ID\",\n      value: txAccount.programId.toString(),\n    },\n    {\n      field: \"Did execute\",\n      value: txAccount.didExecute.toString(),\n    },\n    {\n      field: \"Instruction data\",\n      value: (\n        <code\n          style={{\n            wordBreak: \"break-word\",\n            width: \"370px\",\n            background: \"black\",\n            color: \"#ffffff\",\n            float: \"right\",\n            textAlign: \"left\",\n          }}\n        >\n          {encodeBase64(txAccount.data)}\n        </code>\n      ),\n    },\n    {\n      field: \"Multisig\",\n      value: txAccount.multisig.toString(),\n    },\n    {\n      field: \"Transaction account\",\n      value: tx.publicKey.toString(),\n    },\n    {\n      field: \"Owner set seqno\",\n      value: txAccount.ownerSetSeqno.toString(),\n    },\n  ];\n  const msAccountRows = multisigAccount.owners.map(\n    (owner: PublicKey, idx: number) => {\n      return {\n        field: owner.toString(),\n        value: txAccount.signers[idx] ? <CheckIcon /> : <RemoveIcon />,\n      };\n    }\n  );\n  const approve = async () => {\n    enqueueSnackbar(\"Approving transaction\", {\n      variant: \"info\",\n    });\n    await multisigClient.rpc.approve({\n      accounts: {\n        multisig,\n        transaction: tx.publicKey,\n        owner: multisigClient.provider.wallet.publicKey,\n      },\n    });\n    enqueueSnackbar(\"Transaction approved\", {\n      variant: \"success\",\n    });\n  };\n  const execute = async () => {\n    enqueueSnackbar(\"Executing transaction\", {\n      variant: \"info\",\n    });\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    );\n    await multisigClient.rpc.executeTransaction({\n      accounts: {\n        multisig,\n        multisigSigner,\n        transaction: tx.publicKey,\n      },\n      remainingAccounts: txAccount.accounts\n        .map((t: any) => {\n          if (t.pubkey.equals(multisigSigner)) {\n            return { ...t, isSigner: false };\n          }\n          return t;\n        })\n        .concat({\n          pubkey: txAccount.programId,\n          isWritable: false,\n          isSigner: false,\n        }),\n    });\n    enqueueSnackbar(\"Transaction executed\", {\n      variant: \"success\",\n    });\n  };\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(!open)}>\n        <ListItemIcon>{icon(tx, multisigClient)}</ListItemIcon>\n        {ixLabel(tx, multisigClient)}\n        {txAccount.didExecute && (\n          <CheckCircleIcon style={{ marginRight: \"16px\" }} />\n        )}\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <div style={{ background: \"#ececec\", padding: \"10px\" }}>\n          <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n            <Button\n              style={{ marginRight: \"10px\" }}\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() =>\n                approve().catch((err) => {\n                  let errStr = \"\";\n                  if (err) {\n                    errStr = err.toString();\n                  }\n                  enqueueSnackbar(`Unable to approve transaction: ${errStr}`, {\n                    variant: \"error\",\n                  });\n                })\n              }\n            >\n              Approve\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() =>\n                execute().catch((err) => {\n                  let errStr = \"\";\n                  if (err) {\n                    errStr = err.toString();\n                  }\n                  enqueueSnackbar(`Unable to execute transaction: ${errStr}`, {\n                    variant: \"error\",\n                  });\n                })\n              }\n            >\n              Execute\n            </Button>\n          </div>\n          <Card style={{ marginTop: \"16px\" }}>\n            <CardContent>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Transaction Field</TableCell>\n                    <TableCell align=\"right\">Value</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rows.map((r) => (\n                    <TableRow>\n                      <TableCell key={r.field}>{r.field}</TableCell>\n                      <TableCell align=\"right\" key={`${r.field}-value`}>{r.value}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n          <Card style={{ marginTop: \"16px\" }}>\n            <CardContent>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Multisig Owner</TableCell>\n                    <TableCell align=\"right\">Did Sign</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {txAccount.ownerSetSeqno === multisigAccount.ownerSetSeqno &&\n                    msAccountRows.map((r: any) => (\n                      <TableRow>\n                        <TableCell>{r.field}</TableCell>\n                        <TableCell align=\"right\">{r.value}</TableCell>\n                      </TableRow>\n                    ))}\n                </TableBody>\n              </Table>\n              {txAccount.ownerSetSeqno !== multisigAccount.ownerSetSeqno && (\n                <div style={{ marginTop: \"16px\" }}>\n                  <Typography\n                    color=\"textSecondary\"\n                    style={{ textAlign: \"center\" }}\n                  >\n                    The owner set has changed since this transaction was created\n                  </Typography>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n          <Card style={{ marginTop: \"16px\" }}>\n            <CardContent>\n              <AccountsList accounts={txAccount.accounts} />\n            </CardContent>\n          </Card>\n        </div>\n      </Collapse>\n    </>\n  );\n}\n\nfunction ixLabel(tx: any, multisigClient: any) {\n  if (tx.account.programId.equals(BPF_LOADER_UPGRADEABLE_PID)) {\n    // Upgrade instruction.\n    if (tx.account.data.equals(Buffer.from([3, 0, 0, 0]))) {\n      return (\n        <ListItemText\n          primary=\"Program upgrade\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n  }\n  if (tx.account.programId.equals(multisigClient.programId)) {\n    const setThresholdSighash = multisigClient.coder.sighash(\n      \"global\",\n      \"change_threshold\"\n    );\n    if (setThresholdSighash.equals(tx.account.data.slice(0, 8))) {\n      return (\n        <ListItemText\n          primary=\"Set threshold\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n    const setOwnersSighash = multisigClient.coder.sighash(\n      \"global\",\n      \"set_owners\"\n    );\n    if (setOwnersSighash.equals(tx.account.data.slice(0, 8))) {\n      return (\n        <ListItemText\n          primary=\"Set owners\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n  }\n  if (idl.IDL_TAG.equals(tx.account.data.slice(0, 8))) {\n    return (\n      <ListItemText primary=\"Upgrade IDL\" secondary={tx.publicKey.toString()} />\n    );\n  }\n  return <ListItemText primary={tx.publicKey.toString()} />;\n}\n\nfunction AccountsList({ accounts }: { accounts: any }) {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Account</TableCell>\n          <TableCell align=\"right\">Writable</TableCell>\n          <TableCell align=\"right\">Signer</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {accounts.map((r: any) => (\n          <TableRow>\n            <TableCell>{r.pubkey.toString()}</TableCell>\n            <TableCell align=\"right\">{r.isWritable.toString()}</TableCell>\n            <TableCell align=\"right\">{r.isSigner.toString()}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n}\n\nfunction SignerDialog({\n  multisig,\n  multisigAccount,\n  open,\n  onClose,\n}: {\n  multisig: PublicKey;\n  multisigAccount: any;\n  open: boolean;\n  onClose: () => void;\n}) {\n  const multisigClient = useMultisigProgram();\n  const [signer, setSigner] = useState<null | string>(null);\n  useEffect(() => {\n    PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    ).then((addrNonce) => setSigner(addrNonce[0].toString()));\n  }, [multisig, multisigClient.programId, setSigner, multisigClient]);\n  return (\n    <Dialog open={open} fullWidth onClose={onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          Multisig Info\n        </Typography>\n      </DialogTitle>\n      <DialogContent style={{ paddingBottom: \"16px\" }}>\n        <DialogContentText>\n          <b>Program derived address</b>: {signer}. This is the address one\n          should use as the authority for data governed by the multisig.\n        </DialogContentText>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Owners</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {multisigAccount.owners.map((r: any) => (\n              <TableRow key={r.toString()}>\n                <TableCell>{r.toString()}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction AddTransactionDialog({\n  multisig,\n  open,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  open: boolean;\n  onClose: () => void;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  return (\n    <Dialog open={open} fullWidth onClose={onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Transaction\n        </Typography>\n      </DialogTitle>\n      <DialogContent style={{ paddingBottom: \"16px\" }}>\n        <DialogContentText>\n          Create a new transaction to be signed by the multisig. This\n          transaction will not execute until enough owners have signed the\n          transaction.\n        </DialogContentText>\n        <List disablePadding>\n          <ProgramUpdateListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <IdlUpgradeListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <MultisigSetOwnersListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <ChangeThresholdListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <TransferTokenListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n        </List>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction ChangeThresholdListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen((open) => !open)}>\n        <ListItemIcon>\n          <GavelIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Change threshold\"} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <ChangeThresholdListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction ChangeThresholdListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [threshold, setThreshold] = useState(2);\n  const multisigClient = useMultisigProgram();\n  // @ts-ignore\n  const { enqueueSnackbar } = useSnackbar();\n  const changeThreshold = async () => {\n    enqueueSnackbar(\"Creating change threshold transaction\", {\n      variant: \"info\",\n    });\n    const data = changeThresholdData(multisigClient, threshold);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    );\n    const accounts = [\n      {\n        pubkey: multisig,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: multisigSigner,\n        isWritable: false,\n        isSigner: true,\n      },\n    ];\n    const transaction = new Account();\n    const txSize = 1000; // todo\n    const tx = await multisigClient.rpc.createTransaction(\n      multisigClient.programId,\n      accounts,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize\n          ),\n        ],\n      }\n    );\n    enqueueSnackbar(\"Transaction created\", {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n  return (\n    <div\n      style={{\n        background: \"#f1f0f0\",\n        paddingLeft: \"24px\",\n        paddingRight: \"24px\",\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: \"16px\" }}\n        label=\"Threshold\"\n        value={threshold}\n        type=\"number\"\n        onChange={(e) => {\n          // @ts-ignore\n          setThreshold(e.target.value);\n        }}\n      />\n      <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n        <Button onClick={() => changeThreshold()}>Change Threshold</Button>\n      </div>\n    </div>\n  );\n}\n\nfunction MultisigSetOwnersListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen((open) => !open)}>\n        <ListItemIcon>\n          <SupervisorAccountIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Set owners\"} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <SetOwnersListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction SetOwnersListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const multisigClient = useMultisigProgram();\n  // @ts-ignore\n  const zeroAddr = new PublicKey(\"11111111111111111111111111111111\").toString();\n  const [participants, setParticipants] = useState([zeroAddr]);\n  const { enqueueSnackbar } = useSnackbar();\n  const setOwners = async () => {\n    enqueueSnackbar(\"Creating setOwners transaction\", {\n      variant: \"info\",\n    });\n    const owners = participants.map((p) => new PublicKey(p));\n    const data = setOwnersData(multisigClient, owners);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    );\n    const accounts = [\n      {\n        pubkey: multisig,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: multisigSigner,\n        isWritable: false,\n        isSigner: true,\n      },\n    ];\n    const transaction = new Account();\n    const txSize = 5000; // TODO: tighter bound.\n    const tx = await multisigClient.rpc.createTransaction(\n      multisigClient.programId,\n      accounts,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize\n          ),\n        ],\n      }\n    );\n    if (!tx) {\n      return;\n    }\n    enqueueSnackbar(\"Transaction created\", {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n  return (\n    <div\n      style={{\n        background: \"#f1f0f0\",\n        paddingLeft: \"24px\",\n        paddingRight: \"24px\",\n      }}\n    >\n      {participants.map((p, idx) => (\n        <TextField\n          fullWidth\n          style={{ marginTop: \"16px\" }}\n          label=\"Participant\"\n          value={p}\n          onChange={(e) => {\n            const p = [...participants];\n            p[idx] = e.target.value;\n            setParticipants(p);\n          }}\n        />\n      ))}\n      <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n        <IconButton\n          onClick={() => {\n            const p = [...participants];\n            // @ts-ignore\n            p.push(new PublicKey(\"11111111111111111111111111111111\").toString());\n            setParticipants(p);\n          }}\n        >\n          <AddIcon />\n        </IconButton>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n          marginTop: \"16px\",\n          paddingBottom: \"16px\",\n        }}\n      >\n        <Button onClick={() => setOwners()}>Set Owners</Button>\n      </div>\n    </div>\n  );\n}\n\nfunction IdlUpgradeListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen((open) => !open)}>\n        <ListItemIcon>\n          <DescriptionIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Upgrade IDL\"} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <UpgradeIdlListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction UpgradeIdlListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n\n  const [programId, setProgramId] = useState<null | string>(null);\n  const [buffer, setBuffer] = useState<null | string>(null);\n\n  const multisigClient = useMultisigProgram();\n  const { enqueueSnackbar } = useSnackbar();\n  const createTransactionAccount = async () => {\n    enqueueSnackbar(\"Creating transaction\", {\n      variant: \"info\",\n    });\n    const programAddr = new PublicKey(programId as string);\n    const bufferAddr = new PublicKey(buffer as string);\n    const idlAddr = await idlAddress(programAddr);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    );\n    const data = idl.encodeInstruction({ setBuffer: {} });\n    const accs = [\n      {\n        pubkey: bufferAddr,\n        isWritable: true,\n        isSigner: false,\n      },\n      { pubkey: idlAddr, isWritable: true, isSigner: false },\n      { pubkey: multisigSigner, isWritable: true, isSigner: false },\n    ];\n    const txSize = 1000; // TODO: tighter bound.\n    const transaction = new Account();\n    const tx = await multisigClient.rpc.createTransaction(\n      programAddr,\n      accs,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize\n          ),\n        ],\n      }\n    );\n    enqueueSnackbar(\"Transaction created\", {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return (\n    <div\n      style={{\n        background: \"#f1f0f0\",\n        paddingLeft: \"24px\",\n        paddingRight: \"24px\",\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: \"16px\" }}\n        label=\"Program ID\"\n        value={programId}\n        onChange={(e) => setProgramId(e.target.value as string)}\n      />\n      <TextField\n        style={{ marginTop: \"16px\" }}\n        fullWidth\n        label=\"New IDL buffer\"\n        value={buffer}\n        onChange={(e) => setBuffer(e.target.value as string)}\n      />\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n          marginTop: \"16px\",\n          paddingBottom: \"16px\",\n        }}\n      >\n        <Button onClick={() => createTransactionAccount()}>\n          Create upgrade\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction ProgramUpdateListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen((open) => !open)}>\n        <ListItemIcon>\n          <BuildIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Upgrade program\"} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <UpgradeProgramListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nconst BPF_LOADER_UPGRADEABLE_PID = new PublicKey(\n  \"BPFLoaderUpgradeab1e11111111111111111111111\"\n);\n\nfunction UpgradeProgramListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [programId, setProgramId] = useState<null | string>(null);\n  const [buffer, setBuffer] = useState<null | string>(null);\n\n  const multisigClient = useMultisigProgram();\n  const { enqueueSnackbar } = useSnackbar();\n  const createTransactionAccount = async () => {\n    enqueueSnackbar(\"Creating transaction\", {\n      variant: \"info\",\n    });\n    const programAddr = new PublicKey(programId as string);\n    const bufferAddr = new PublicKey(buffer as string);\n    // Hard code serialization.\n    const data = Buffer.from([3, 0, 0, 0]);\n\n    const programAccount = await (async () => {\n      const programAccount = await multisigClient.provider.connection.getAccountInfo(\n        programAddr\n      );\n      if (programAccount === null) {\n        throw new Error(\"Invalid program ID\");\n      }\n      return {\n        // Hard code deserialization.\n        programdataAddress: new PublicKey(programAccount.data.slice(4)),\n      };\n    })();\n    const spill = multisigClient.provider.wallet.publicKey;\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    );\n    const accs = [\n      {\n        pubkey: programAccount.programdataAddress,\n        isWritable: true,\n        isSigner: false,\n      },\n      { pubkey: programAddr, isWritable: true, isSigner: false },\n      { pubkey: bufferAddr, isWritable: true, isSigner: false },\n      { pubkey: spill, isWritable: true, isSigner: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isWritable: false, isSigner: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false, isSigner: false },\n      { pubkey: multisigSigner, isWritable: false, isSigner: false },\n    ];\n    const txSize = 1000; // TODO: tighter bound.\n    const transaction = new Account();\n    const tx = await multisigClient.rpc.createTransaction(\n      BPF_LOADER_UPGRADEABLE_PID,\n      accs,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize\n          ),\n        ],\n      }\n    );\n    enqueueSnackbar(\"Transaction created\", {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return (\n    <div\n      style={{\n        background: \"#f1f0f0\",\n        paddingLeft: \"24px\",\n        paddingRight: \"24px\",\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: \"16px\" }}\n        label=\"Program ID\"\n        value={programId}\n        onChange={(e) => setProgramId(e.target.value as string)}\n      />\n      <TextField\n        style={{ marginTop: \"16px\" }}\n        fullWidth\n        label=\"New program buffer\"\n        value={buffer}\n        onChange={(e) => setBuffer(e.target.value as string)}\n      />\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n          marginTop: \"16px\",\n          paddingBottom: \"16px\",\n        }}\n      >\n        <Button onClick={() => createTransactionAccount()}>\n          Create upgrade\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction TransferTokenListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen((open) => !open)}>\n        <ListItemIcon>\n          <MoneyRounded />\n        </ListItemIcon>\n        <ListItemText primary={\"Transfer Token\"} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <TransferTokenListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction TransferTokenListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [source, setSource] = useState<null | string>(null);\n  const [destination, setDestination] = useState<null | string>(null);\n  const [amount, setAmount] = useState<null | u64>(null);\n\n  const multisigClient = useMultisigProgram();\n  const { enqueueSnackbar } = useSnackbar();\n  const createTransactionAccount = async () => {\n    enqueueSnackbar(\"Creating transaction\", {\n      variant: \"info\",\n    });\n    const sourceAddr = new PublicKey(source as string);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    );\n    const sourceTokenAccount = await serumCmn.getTokenAccount(\n      multisigClient.provider,\n      sourceAddr,\n    );\n    const tokenMint = await serumCmn.getMintInfo(\n      multisigClient.provider,\n      sourceTokenAccount.mint,\n    );\n    const destinationAddr = new PublicKey(destination as string);\n\n    if (!amount) {\n      enqueueSnackbar(\"No amount provided\", {\n        variant: \"warning\",\n      });\n      return\n    }\n    const TEN = new u64(10);\n    const multiplier = TEN.pow(new BN(tokenMint.decimals));\n    const amountInLamports = amount.mul(multiplier);\n    const transferIx = Token.createTransferInstruction(\n      TOKEN_PROGRAM_ID,\n      sourceAddr,\n      destinationAddr,\n      multisigSigner,\n      [],\n      new u64(amountInLamports.toString())\n    );\n    const transaction = new Account();\n    const tx = await multisigClient.rpc.createTransaction(\n      TOKEN_PROGRAM_ID,\n      transferIx.keys,\n      Buffer.from(transferIx.data),\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            1000\n          ),\n        ],\n      }\n    );\n    enqueueSnackbar(\"Transaction created\", {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return (\n    <div\n      style={{\n        background: \"#f1f0f0\",\n        paddingLeft: \"24px\",\n        paddingRight: \"24px\",\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: \"16px\" }}\n        label=\"Source Token Account\"\n        value={source}\n        onChange={(e) => setSource(e.target.value as string)}\n      />\n      <TextField\n        style={{ marginTop: \"16px\" }}\n        fullWidth\n        label=\"Amount\"\n        value={amount}\n        onChange={(e) => setAmount(new u64(e.target.value as string))}\n      />\n      <TextField\n        style={{ marginTop: \"16px\" }}\n        fullWidth\n        label=\"Destination Address\"\n        value={destination}\n        onChange={(e) => setDestination(e.target.value as string)}\n      />\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n          marginTop: \"16px\",\n          paddingBottom: \"16px\",\n        }}\n      >\n        <Button onClick={() => createTransactionAccount()}>\n          Create Token Transfer\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// @ts-ignore\nfunction icon(tx, multisigClient) {\n  if (tx.account.programId.equals(BPF_LOADER_UPGRADEABLE_PID)) {\n    return <BuildIcon />;\n  }\n  if (tx.account.programId.equals(multisigClient.programId)) {\n    const setThresholdSighash = multisigClient.coder.sighash(\n      \"global\",\n      \"change_threshold\"\n    );\n    if (setThresholdSighash.equals(tx.account.data.slice(0, 8))) {\n      return <GavelIcon />;\n    }\n    const setOwnersSighash = multisigClient.coder.sighash(\n      \"global\",\n      \"set_owners\"\n    );\n    if (setOwnersSighash.equals(tx.account.data.slice(0, 8))) {\n      return <SupervisorAccountIcon />;\n    }\n  }\n  if (idl.IDL_TAG.equals(tx.account.data.slice(0, 8))) {\n    return <DescriptionIcon />;\n  }\n  return <ReceiptIcon />;\n}\n\n// @ts-ignore\nfunction changeThresholdData(multisigClient, threshold) {\n  return multisigClient.coder.instruction.encode(\"change_threshold\", {\n    threshold: new BN(threshold),\n  });\n}\n\n// @ts-ignore\nfunction setOwnersData(multisigClient, owners) {\n  return multisigClient.coder.instruction.encode(\"set_owners\", {\n    owners,\n  });\n}\n\n\n// Deterministic IDL address as a function of the program id.\nasync function idlAddress(programId: PublicKey): Promise<PublicKey> {\n  const base = (await PublicKey.findProgramAddress([], programId))[0];\n  return await PublicKey.createWithSeed(base, seed(), programId);\n}\n\n// Seed for generating the idlAddress.\nfunction seed(): string {\n  return \"anchor:idl\";\n}\n\n// The ","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Menu from \"@material-ui/core/Menu\";\nimport Link from \"@material-ui/core/Link\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport BubbleChartIcon from \"@material-ui/icons/BubbleChart\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport DisconnectIcon from '@material-ui/icons/LinkOff';\nimport { WalletDisconnectButton, WalletMultiButton } from \"@solana/wallet-adapter-material-ui\";\nimport { ENDPOINTS, useConnectionConfig } from \"../context/connection\";\n\nexport default function Header() {\n  const wallet  = useAnchorWallet();\n  const history = useHistory();\n  const [multisigAddress, setMultisigAddress] = useState(\"\");\n  const disabled = !isValidPubkey(multisigAddress);\n  const searchFn = () => {\n    history.push(`/${multisigAddress}`);\n  };\n  return (\n    <AppBar\n      position=\"static\"\n      style={{\n        background: \"#ffffff\",\n        color: \"#272727\",\n        boxShadow: \"none\",\n        borderBottom: \"solid 1pt #ccc\",\n      }}\n    >\n      <Toolbar>\n        <div\n          style={{\n            display: \"flex\",\n            width: \"100%\",\n          }}\n        >\n          <div style={{ display: \"flex\", flex: 1 }}>\n            <BarButton label=\"Multisig\" hrefClient=\"/\" />\n            <div\n              style={{\n                marginLeft: \"16px\",\n                marginRight: \"16px\",\n                borderRadius: \"25px\",\n                display: \"flex\",\n                flex: 1,\n                backgroundColor: \"rgb(245 245 245)\",\n              }}\n            >\n              <input\n                style={{\n                  flex: 1,\n                  background: \"none\",\n                  padding: \"16px\",\n                  border: \"none\",\n                  outlineWidth: 0,\n                  color: \"inherit\",\n                }}\n                placeholder=\"Search a multisig address...\"\n                value={multisigAddress}\n                onChange={(e) => setMultisigAddress(e.target.value as string)}\n                onKeyPress={(e) => {\n                  if (e.key === \"Enter\") {\n                    searchFn();\n                  }\n                }}\n              />\n              <IconButton disabled={disabled} onClick={searchFn}>\n                <SearchIcon />\n              </IconButton>\n            </div>\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n            }}\n          >\n            <NetworkSelector />\n            <WalletMultiButton />\n            {wallet && <WalletDisconnectButton startIcon={<DisconnectIcon />} style={{ marginLeft: 8 }} />}\n          </div>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nfunction SerumLogoButton() {\n  const history = useHistory();\n  return (\n    <div style={{ display: \"flex\" }} onClick={() => history.push(\"/\")}>\n      <Button color=\"inherit\">\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n          }}\n        >\n          <img\n            style={{\n              display: \"block\",\n              height: \"35px\",\n            }}\n            alt=\"Logo\"\n            src=\"http://dex.projectserum.com/static/media/logo.49174c73.svg\"\n          />\n        </div>\n      </Button>\n    </div>\n  );\n}\n\ntype BarButtonProps = {\n  label: string;\n  hrefClient?: string;\n  href?: string;\n};\n\nfunction BarButton(props: BarButtonProps) {\n  const history = useHistory();\n  const { label, href, hrefClient } = props;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n      }}\n      onClick={() => hrefClient && history.push(hrefClient)}\n    >\n      <Link\n        style={{ color: \"inherit\", textDecoration: \"none\" }}\n        href={href}\n        target=\"_blank\"\n      >\n        <Button color=\"inherit\">\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              flexDirection: \"column\",\n            }}\n          >\n            <Typography style={{ fontSize: \"15px\" }}>{label}</Typography>\n          </div>\n        </Button>\n      </Link>\n    </div>\n  );\n}\n\nfunction NetworkSelector() {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const {env, setEndpoint} = useConnectionConfig();\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div\n      style={{\n        marginRight: \"10px\",\n        fontSize: \"15px\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      <Button\n        color=\"inherit\"\n        onClick={(e) =>\n          setAnchorEl(\n            // @ts-ignore\n            e.currentTarget\n          )\n        }\n      >\n        <BubbleChartIcon />\n        <Typography style={{ marginLeft: \"5px\", fontSize: \"15px\" }}>\n          {env.toString()}\n        </Typography>\n      </Button>\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        style={{\n          marginLeft: \"12px\",\n          color: \"white\",\n        }}\n      >\n        {ENDPOINTS.map(endpoint => {\n          return (\n            <MenuItem\n            key={endpoint.name.toString()}\n            onClick={() => {\n              handleClose();\n              setEndpoint(endpoint.endpoint);\n            }}\n          >\n            <Typography>{endpoint.name}</Typography>\n          </MenuItem>\n          )\n        })}\n      </Menu>\n    </div>\n  );\n}\n\nfunction isValidPubkey(addr: string): boolean {\n  try {\n    new PublicKey(addr);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\n\nexport default function Footer() {\n  return (\n    <div\n      style={{\n        zIndex: 99,\n        position: \"fixed\",\n        width: \"100%\",\n        bottom: 0,\n        textAlign: \"center\",\n        height: \"30px\",\n        backgroundColor: \"#fbfbfb\",\n        borderTop: \"solid 1pt #ccc\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        paddingLeft: \"10px\",\n        paddingRight: \"10px\",\n      }}\n    >\n      <div style={{ marginLeft: \"auto\", marginRight: \"auto\", display: \"flex\" }}>\n        <FooterButton\n          href={\"https://github.com/project-serum/multisig\"}\n          label={\"Source\"}\n        />\n        <FooterButton\n          href={\"https://github.com/project-serum/awesome-serum\"}\n          label={\"Developer Resources\"}\n        />\n        <FooterButton\n          href={\"https://discord.com/channels/739225212658122886\"}\n          label={\"Discord\"}\n        />\n        <FooterButton href={\"https://t.me/ProjectSerum\"} label={\"Telegram\"} />\n        <FooterButton\n          href={\"https://github.com/project-serum\"}\n          label={\"GitHub\"}\n        />\n        <FooterButton\n          href={\"https://solanabeach.io/\"}\n          label={\"Solana Network\"}\n          isEnd={true}\n        />\n      </div>\n    </div>\n  );\n}\n\ntype FooterButtonProps = {\n  label: string;\n  href: string;\n  isEnd?: boolean;\n};\n\nfunction FooterButton(props: FooterButtonProps) {\n  const { label, href, isEnd } = props;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n        marginRight: isEnd ? \"\" : \"15px\",\n      }}\n    >\n      <Link href={href} target=\"_blank\" color=\"inherit\">\n        <Typography style={{ fontSize: \"14px\" }}>{label}</Typography>\n      </Link>\n    </div>\n  );\n}\n","import React, { useState, PropsWithChildren } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\ntype Props = {};\n\nexport default function Layout(props: PropsWithChildren<Props>) {\n  const [refresh, setRefresh] = useState(false);\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        minHeight: \"100vh\",\n        flexDirection: \"column\",\n        backgroundColor: \"rgb(251, 251, 251)\",\n      }}\n    >\n      <div\n        style={{\n          position: \"fixed\",\n          width: \"100%\",\n          zIndex: 99,\n        }}\n      >\n        <RiskBar />\n        <Header />\n      </div>\n      <div\n        style={{\n          width: \"100%\",\n          marginTop: \"94px\",\n          flex: 1,\n          display: \"flex\",\n          marginBottom: \"30px\", // Compensates for the fixed position footer.\n        }}\n      >\n        {window.localStorage.getItem(\"consent\") ? (\n          <div style={{ width: \"100%\" }}>{props.children}</div>\n        ) : (\n          <RiskDisclosureForm\n            onConsent={() => {\n              window.localStorage.setItem(\"consent\", \"true\");\n              setRefresh(!refresh);\n            }}\n          />\n        )}\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nfunction RiskBar() {\n  return (\n    <div\n      style={{\n        color: \"#fff\",\n        backgroundColor: \"rgb(39, 39, 39)\",\n        height: \"30px\",\n        textAlign: \"center\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n          height: \"100%\",\n        }}\n      >\n        <Typography style={{ fontSize: \"14px\" }}>\n          Multisig is unaudited software. Use at your own risk.\n        </Typography>\n      </div>\n    </div>\n  );\n}\n\nfunction RiskDisclosureForm({ onConsent }: { onConsent: () => void }) {\n  return (\n    <div\n      style={{\n        flex: \"1\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n        textAlign: \"center\",\n      }}\n    >\n      <div style={{ width: \"100%\", display: \"flex\" }}>\n        <div\n          style={{ display: \"flex\", marginLeft: \"auto\", marginRight: \"auto\" }}\n        >\n          <Typography\n            style={{ marginBottom: \"16px\", maxWidth: \"1000px\" }}\n            color=\"textSecondary\"\n            variant=\"h4\"\n          >\n            No statement or warranty is provided in relation to the utility of\n            this program, the safety of its code or its suitability for your\n            use, and by using it, you agree to bear any risk associated with\n            such potential vulnerabilities, including, but not limited to the\n            potential loss of tokens.\n          </Typography>\n        </div>\n      </div>\n      <div style={{ display: \"flex\", marginLeft: \"auto\", marginRight: \"auto\" }}>\n        <Button variant=\"contained\" color=\"primary\" onClick={onConsent}>\n          I agree\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport { SnackbarProvider } from \"notistack\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { unstable_createMuiStrictModeTheme as createMuiTheme } from \"@material-ui/core/styles\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport Layout from \"./components/Layout\";\nimport Multisig from \"./components/Multisig\";\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { WalletProvider } from \"@solana/wallet-adapter-react\";\nimport {\n  getLedgerWallet,\n  getMathWallet,\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolongWallet,\n  getTorusWallet,\n} from '@solana/wallet-adapter-wallets';\nimport { ConnectionProvider } from \"./context/connection\";\nimport './App.css'\n\nfunction App() {\n  const theme = createMuiTheme({\n    palette: {\n      background: {\n        default: \"rgb(255,255,255)\",\n      },\n    },\n    typography: {\n      fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"),\n    },\n    overrides: {},\n  });\n  const wallets = useMemo(\n    () => [\n        getPhantomWallet(),\n        getSolflareWallet(),\n        getTorusWallet({\n            options: {\n                clientId: 'BOM5Cl7PXgE9Ylq1Z1tqzhpydY0RVr8k90QQ85N7AKI5QGSrr9iDC-3rvmy0K_hF0JfpLMiXoDhta68JwcxS1LQ',\n            },\n        }),\n        getLedgerWallet(),\n        getSolongWallet(),\n        getMathWallet(),\n        getSolletWallet(),\n    ],\n    []\n  );\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\n        <ConnectionProvider>\n          <WalletProvider wallets={wallets} autoConnect>\n              <WalletDialogProvider>\n                <HashRouter basename={\"/\"}>\n                      <Layout>\n                        <Route exact path=\"/\" component={MultisigPage} />\n                        <Route\n                          exact\n                          path=\"/:address\"\n                          component={MultisigInstancePage}\n                        />\n                      </Layout>\n                </HashRouter>\n              </WalletDialogProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </SnackbarProvider>\n    </MuiThemeProvider>\n  );\n}\n\nfunction MultisigPage() {\n  const multisig = new PublicKey(\"6ExGdhoUeqzExzXWx1tW2RPojuRnfXeTRwQ7sCeEcnKy\");\n  return <Multisig multisig={multisig} />;\n}\n\nexport function MultisigInstancePage() {\n  const history = useHistory();\n  const location = useLocation();\n  const path = location.pathname.split(\"/\");\n  if (path.length !== 2) {\n    history.push(`/multisig`);\n    return <></>;\n  } else {\n    const multisig = new PublicKey(path[1]);\n    return <Multisig multisig={multisig} />;\n  }\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Idl } from \"@project-serum/anchor\";\n\nconst idl: Idl = {\n  version: \"0.0.0\",\n  name: \"multisig\",\n  instructions: [\n    {\n      name: \"createMultisig\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"owners\",\n          type: {\n            vec: \"publicKey\",\n          },\n        },\n        {\n          name: \"threshold\",\n          type: \"u64\",\n        },\n        {\n          name: \"nonce\",\n          type: \"u8\",\n        },\n      ],\n    },\n    {\n      name: \"createTransaction\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"transaction\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"proposer\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"pid\",\n          type: \"publicKey\",\n        },\n        {\n          name: \"accs\",\n          type: {\n            vec: {\n              defined: \"TransactionAccount\",\n            },\n          },\n        },\n        {\n          name: \"data\",\n          type: \"bytes\",\n        },\n      ],\n    },\n    {\n      name: \"approve\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"transaction\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"owner\",\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"setOwners\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"multisigSigner\",\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: \"owners\",\n          type: {\n            vec: \"publicKey\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"changeThreshold\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"multisigSigner\",\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: \"threshold\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"executeTransaction\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"multisigSigner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"transaction\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: \"Multisig\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"owners\",\n            type: {\n              vec: \"publicKey\",\n            },\n          },\n          {\n            name: \"threshold\",\n            type: \"u64\",\n          },\n          {\n            name: \"nonce\",\n            type: \"u8\",\n          },\n          {\n            name: \"ownerSetSeqno\",\n            type: \"u32\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"Transaction\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"multisig\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"programId\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"accounts\",\n            type: {\n              vec: {\n                defined: \"TransactionAccount\",\n              },\n            },\n          },\n          {\n            name: \"data\",\n            type: \"bytes\",\n          },\n          {\n            name: \"signers\",\n            type: {\n              vec: \"bool\",\n            },\n          },\n          {\n            name: \"didExecute\",\n            type: \"bool\",\n          },\n          {\n            name: \"ownerSetSeqno\",\n            type: \"u32\",\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: \"TransactionAccount\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"pubkey\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"isSigner\",\n            type: \"bool\",\n          },\n          {\n            name: \"isWritable\",\n            type: \"bool\",\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 100,\n      name: \"InvalidOwner\",\n      msg: \"The given owner is not part of this multisig.\",\n    },\n    {\n      code: 101,\n      name: \"NotEnoughSigners\",\n      msg: \"Not enough owners signed this transaction.\",\n    },\n    {\n      code: 102,\n      name: \"TransactionAlreadySigned\",\n      msg: \"Cannot delete a transaction that has been signed by an owner.\",\n    },\n    {\n      code: 103,\n      name: \"Overflow\",\n      msg: \"Overflow when adding.\",\n    },\n    {\n      code: 104,\n      name: \"UnableToDelete\",\n      msg: \"Cannot delete a transaction the owner did not create.\",\n    },\n    {\n      code: 105,\n      name: \"AlreadyExecuted\",\n      msg: \"The given transaction has already been executed.\",\n    },\n    {\n      code: 106,\n      name: \"InvalidThreshold\",\n      msg: \"Threshold must be less than or equal to the number of owners.\",\n    },\n  ],\n};\n\nexport default idl;\n","import { Program, Provider, Wallet } from \"@project-serum/anchor\";\nimport { ConfirmOptions, Keypair } from \"@solana/web3.js\";\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { useMemo } from \"react\";\nimport MultisigIdl from \"../idl\";\nimport { useConnection } from \"../context/connection\";\n\nexport function useMultisigProgram(): Program {\n  const wallet = useAnchorWallet();\n  const connection = useConnection();\n\n  return useMemo(() => {\n    const opts: ConfirmOptions = {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\",\n    };\n    let provider = new Provider(connection, wallet ?? new Wallet(Keypair.generate()), opts);\n\n    return new Program(MultisigIdl, \"msigmtwzgXJHj2ext4XJjCDmpbcMuufFb5cHuwg6Xdt\", provider);\n  }, [wallet, connection]);\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\nexport let TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nexport const PROGRAM_IDS = [\n  {\n    name: \"mainnet-beta\",\n  },\n  {\n    name: \"testnet\",\n  },\n  {\n    name: \"devnet\",\n  },\n  {\n    name: \"localnet\",\n  },\n];\n\nexport const setProgramIds = (envName: string) => {\n  let instance = PROGRAM_IDS.find((env) => env.name === envName);\n  if (!instance) {\n    return;\n  }\n};\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n  };\n};","import { useLocalStorageState } from \"../utils/utils\";\nimport {\n  Keypair,\n  clusterApiUrl,\n  Connection,\n} from \"@solana/web3.js\";\nimport React, { useContext, useEffect, useMemo } from \"react\";\nimport { setProgramIds } from \"../utils/ids\";\nimport { ENV as ChainID } from \"@solana/spl-token-registry\";\n\nexport type ENV =\n  | \"mainnet-beta\"\n  | \"testnet\"\n  | \"devnet\"\n  | \"localnet\";\n\nexport const ENDPOINTS = [\n  {\n    name: \"mainnet-beta\" as ENV,\n    endpoint: \"https://solana-api.projectserum.com/\",\n    chainID: ChainID.MainnetBeta,\n  },\n  {\n    name: \"testnet\" as ENV,\n    endpoint: clusterApiUrl(\"testnet\"),\n    chainID: ChainID.Testnet,\n  },\n  {\n    name: \"devnet\" as ENV,\n    endpoint: clusterApiUrl(\"devnet\"),\n    chainID: ChainID.Devnet,\n  },\n  {\n    name: \"localnet\" as ENV,\n    endpoint: \"http://127.0.0.1:8899\",\n    chainID: ChainID.Devnet,\n  },\n];\n\nconst DEFAULT = ENDPOINTS[0].endpoint;\n\ninterface ConnectionConfig {\n  connection: Connection;\n  sendConnection: Connection;\n  endpoint: string;\n  env: ENV;\n  setEndpoint: (val: string) => void;\n}\n\nconst ConnectionContext = React.createContext<ConnectionConfig>({\n  endpoint: DEFAULT,\n  setEndpoint: () => {},\n  connection: new Connection(DEFAULT, \"recent\"),\n  sendConnection: new Connection(DEFAULT, \"recent\"),\n  env: ENDPOINTS[0].name,\n});\n\nexport function ConnectionProvider({ children = undefined as any }) {\n  const [endpoint, setEndpoint] = useLocalStorageState(\n    \"connectionEndpts\",\n    ENDPOINTS[0].endpoint\n  );\n\n  const connection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n  const sendConnection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n\n  const chain =\n    ENDPOINTS.find((end) => end.endpoint === endpoint) || ENDPOINTS[0];\n  const env = chain.name;\n\n  setProgramIds(env);\n\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from every getting empty\n  useEffect(() => {\n    const id = connection.onAccountChange(new Keypair().publicKey, () => {});\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = connection.onSlotChange(() => null);\n    return () => {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = sendConnection.onAccountChange(\n      new Keypair().publicKey,\n      () => {}\n    );\n    return () => {\n      sendConnection.removeAccountChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  useEffect(() => {\n    const id = sendConnection.onSlotChange(() => null);\n    return () => {\n      sendConnection.removeSlotChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  return (\n    <ConnectionContext.Provider\n      value={{\n        endpoint,\n        setEndpoint,\n        connection,\n        sendConnection,\n        env,\n      }}\n    >\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection() {\n  return useContext(ConnectionContext).connection as Connection;\n}\n\nexport function useSendConnection() {\n  return useContext(ConnectionContext)?.sendConnection;\n}\n\nexport function useConnectionConfig() {\n  const context = useContext(ConnectionContext);\n  return {\n    endpoint: context.endpoint,\n    setEndpoint: context.setEndpoint,\n    env: context.env,\n  };\n}\n\n","import { useCallback, useState } from \"react\";\n\nexport function useLocalStorageState(key: string, defaultState?: string) {\n  const [state, setState] = useState(() => {\n    // NOTE: Not sure if this is ok\n    const storedState = localStorage.getItem(key);\n    if (storedState) {\n      return JSON.parse(storedState);\n    }\n    return defaultState;\n  });\n\n  const setLocalStorageState = useCallback(\n    (newState) => {\n      const changed = state !== newState;\n      if (!changed) {\n        return;\n      }\n      setState(newState);\n      if (newState === null) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, JSON.stringify(newState));\n      }\n    },\n    [state, key]\n  );\n\n  return [state, setLocalStorageState];\n}"],"sourceRoot":""}